---
title: "Prova 2"
format: html
---

```{r, echo=F, message=F}
library(magrittr)
library(tidyverse)
```


#### 1.

A variância amostral ($S2$), o desvio médio absoluto ($DMA$) e o segundo coeficiente de assimetria de Pearson ($AS_2$) são medidas definidas, respectivamente, por 

$$ S^2 = \frac{1} {n − 1} \sum^{n}_{i = 1}(x_i − \overline{x})^2, \qquad
   DM A = \frac{1}{n − 1} \sum^{n}_{i=1}|x_i − \overline{x}| \qquad e \qquad
   AS_2 = 3 · \frac{\overline{x} − M_d}{S} , $$

em que $\overline{x}$ é a média amostral, $M_d$ é a mediana e $|a|$ corresponde ao módulo de a. Implemente uma função em R que retorne uma lista com o S2, o DM A e o AS2 de uma variável quantitativa qualquer. Na sequência, assinale todas as alternativas correta(s), considerando o banco de dados airquality disponível no R.

```{r}
medidas <- function(v){
  v = na.exclude(v)
  
  S2 =  var(v)
  
  DMA = mad(v)
  
  AS2 = 3*(mean(v)-median(v))/sd(v)
    
  return(list(S2 = S2, DMA = DMA, AS2 = AS2))
}


```

 - A $S^2$ da variável Ozone é:
```{r}
medidas(airquality$Ozone)[[1]]
```

 - O DMA da variável Ozone é: 
```{r}
medidas(airquality$Ozone)[[2]]
```
 
 - No nível 9 da variável Month, o AS2 da variável Wind é:
```{r}
airquality %>% filter(Month == 9) %>% .$Wind %>% medidas(.) %>% .[[3]]

```
 
 - Considerando apenas o nível 9 da variável Month, o DMA da variável Wind é:
```{r}
airquality %>% filter(Month == 9) %>% .$Wind %>% medidas(.) %>% .[[2]]
```
 
 - Para todas as variáveis do banco airquality a variância amostral é maior do que o desvio médio absoluto. (TRUE = 1/FALSE = 0)?
```{r}
for(i in 1:length(airquality)){
  print(paste("S2: ",medidas(airquality[,i])[1], "MAD: ",medidas(airquality[,i])[2]))
  print(medidas(airquality[,i])[[1]] > medidas(airquality[,i])[[2]])
}
```
 
#### 2.

Considere uma matriz m×m, em que m

é um inteiro positivo. Implemente uma função em R que realize a varredura de uma matriz e execute uma operação específica que depende do valor encontrado na matriz, conforme as seguintes regras:

  -  Se o valor for um número primo, multiplique-o por 4.
  -  Se o valor for um quadrado perfeito, subtraia 14. Caso o resultado obtido for negativo, eleve a $5^a$ potência.
  -  Se o valor for negativo na matriz original, calcule a raiz $3^a$ de seu módulo.
  -  Para todos os outros valores, não faça nada.

A função a ser criada deve retornar a matriz transformada.

  -  Dica: Crie funções auxiliares para verificar se um número é primo e se é um quadrado perfeito, e então implemente a função varrer_matriz que realiza a varredura da matriz conforme as regras estabelecidas.

Considere:

  -  Matriz A: matrix( c(-8, 2, 3, -5, -6, 5, -2, -9, -7, 0, 1, -4, 9, 4, 7, 8) , nrow = 4, byrow = FALSE)

  -  Matriz B: matrix( c(-5, -19, -15, 1, 7, 16, -17, -8, 2, -9, -14, 4, -11, 12, -13, 15, -1, 11, 3, 10) , nrow = 4, byrow = FALSE)

  -  Matriz C: matrix( c(12, -12, -15, -22, -23, 28, 24, -16, -5, -17, 26, 14, -25, 6, 2, -2) , nrow = 4, byrow = FALSE)

```{r}
A <- matrix( c(-8, 2, 3, -5, -6, 5, -2, -9, -7, 0, 1, -4, 9, 4, 7, 8) , nrow = 4, byrow = FALSE)
B <- matrix( c(-5, -19, -15, 1, 7, 16, -17, -8, 2, -9, -14, 4, -11, 12, -13, 15, -1, 11, 3, 10) , nrow = 4, byrow = FALSE)
C <- matrix( c(12, -12, -15, -22, -23, 28, 24, -16, -5, -17, 26, 14, -25, 6, 2, -2) , nrow = 4, byrow = FALSE)

# Verifica se n é primo e returna T ou F
is_prime <- function(n){
  if (n<=0){return(F)}
  else{
    divisores = 0
    for (i in 1:n){
      if (n %% i == 0){
        divisores = divisores + 1
      }
    }
    if (divisores <= 2){
      return(T)
    }else{
      return(F)
    }
  }
}

# Transforma a matriz
t_mat <- function(M){
  TM = matrix(NA, nrow = nrow(M), ncol = ncol(M))
  for (i in 1:nrow(M)){
    for (j in 1:ncol(M)){
      if(M[i,j] < 0){
        TM[i,j] = (abs(M[i,j]))^(1/3)
      }else if (is_prime(M[i,j])){
        TM[i,j] = M[i,j]*4
      }else if(sqrt(M[i,j]) %% 1 == 0){
        TM[i,j] = M[i,j] - 14
        if(TM[i,j]<0){TM[i,j] = TM[i,j]^5}
      }else{
        TM[i,j] = M[i,j]
      }
    }
  }
  return(TM)
}
```


Considerando o contexto proposto, responda o que se pede.

 - A soma dos elementos da diagonal principal da matriz A transformada é:
```{r}
sum(diag(t_mat(A)))
```

 - O maior elemento, em módulo, da matriz C transformada é:
```{r}
C %>% t_mat() %>% abs %>% sort %>% tail(1)
```

 - A soma dos elementos da coluna 1 da matriz C transformada é:
```{r}
C %>% t_mat() %>% .[,1] %>% sum
```

 -  matriz A tem quantos números primos?
```{r}
p_mat <- function(M){
  count = 0
  for (i in 1:nrow(M)){
    for (j in 1:ncol(M)){
      if (is_prime(M[i,j])){
        count = count + 1
      }
    }
  }
  return(count)
}
p_mat(A)
```
 
 - As matrizes A, B e C juntas têm quantos números primos?
```{r}
p_mat(A)+p_mat(B)+p_mat(C)
```
 
 
 
 
#### 3.

O Lago Baikal, na Rússia, é famoso por sua abundância de nutrientes e por sua beleza natural, sendo lar da espécie de peixe Omul do Baikal (Coregonus migratorius). O lago pode suportar uma capacidade máxima de 1.5 × 106 peixes e apresenta uma taxa de reprodução basal de 16% ao dia.

Essa taxa de reprodução varia de acordo com a temperatura média da estação do ano, conforme a Tabela 1. Além disso, o pH da água afeta o comportamento dos pescadores, que pescam diferentes porcentagens de peixes por dia, conforme a Tabela 2.


|Estacao |	Temperatura |	FatorReproducao|
|---|---|---|
|Primavera | 20 |	 0.04|
|Verão 	   | 20 |	-0.02|
|Outono    | 15 |  0.02|
|Inverno   | 	5 |	-0.04|
: Tabela 1: Ajuste na Taxa de Reprodução Baseada na Temperatura


|FaixaPH| 	PercentualPescado|
|-------|   -----------------|
|6.0–6.5| 	0.01|
|6.6–7.0| 	0.06|
|7.1–7.5| 	0.16|
|7.6–8.0| 	0.03|
: Tabela 2: Porcentagem de Peixes Pescados por Dia com Base no pH da Água 


Sua Tarefa

    1. Crie uma função chamada simular_lago que receba como entrada os seguintes parâmetros:

      - dias: Número de dias do experimento.
      - peixes_iniciais: Número inicial de peixes no lago.
      - estacao: Estação do ano (Primavera, Verão, Outono ou Inverno).
      - ph: pH médio da água durante o experimento.

    2. A função deve calcular:

      - O número de peixes no lago a cada dia.
      - O número de dias até o lago atingir sua capacidade máxima ou o número final de peixes ao fim do período definido por dias.

    3. Saída esperada:

      - Um data frame com duas colunas: dias e peixes, onde dias é o número do dia e peixes é o número de peixes no lago naquele dia.

Fórmula

A cada dia, o número de peixes é calculado como:

Peixes no próximo dia=Peixes atuais×(1+taxa de reprodução ajustada)−peixes pescados

Onde:

    Taxa de reprodução ajustada:
    Taxa basal+fator de ajuste da Tabela 1.

Peixes pescados:
Peixes atuais×porcentagem de peixes pescados (Tabela 2).

    Observação: O número de peixes nunca pode exceder a capacidade máxima do lago, e o número máximo de dias que os pesquisadores irão quantificar os peixes é 1000 dias. Além disso, contagem de peixes é sempre um número inteiro, considere sempre arredondar para cima.

Exemplo de Uso

Considere a entrada:

resultado <- simular_lago(
dias = 30, 
peixes_iniciais = 50000, 
estacao = "Verão", 
ph = 7.0
)


```{r}
capacidade = 1.5*10^6

simular_lago <- function(dias, peixes_iniciais = 90, estacao, ph){
  
  tx_reproducao = switch(estacao,
                         "Primavera" = .04,
                         "Verão" = -.02,
                         "Outono" = .02,
                         "Inverno" = -.04
                         )
  
  if(ph <= 6.5){tx_pescados = 0.01
  }else if(ph <= 7)   {tx_pescados = .06
  }else if(ph <= 7.5) {tx_pescados = .16
  }else               {tx_pescados = .03}
  
  dia <- 1
  peixes <- peixes_iniciais
  
  simulacao = data.frame(
    dias = c(dia),
    peixes = c(peixes)
  )
  
  while(dia < dias){
    peixes = ceiling(peixes*(1+.16+tx_reproducao) - peixes*tx_pescados)
    dia = dia + 1
    simulacao[nrow(simulacao)+1,] <- c(dia, peixes)
  }
  return(simulacao)
}


```

 - Durante a estação Inverno e com pH médio da água de 7.6–8.0, após 22 dias, quantos peixes haverá no lago?
```{r}
lago1 <- simular_lago(22, 90, "Inverno", 7.8)
lago1 %>% tail(1)
```
 
 - Durante a estação Inverno e com pH médio da água de 7.6–8.0, quantos dias são necessários para o lago atingir sua capacidade máxima?
 
```{r}


capacidade = 1.5*10^6

simular_lago_capacidade <- function(peixes_iniciais = 90, estacao, ph){
  
  tx_reproducao = switch(estacao,
                         "Primavera" = .04,
                         "Verão" = -.02,
                         "Outono" = .02,
                         "Inverno" = -.04
                         )
  
  if(ph <= 6.5){tx_pescados = 0.01
  }else if(ph <= 7)   {tx_pescados = .06
  }else if(ph <= 7.5) {tx_pescados = .16
  }else               {tx_pescados = .03}
  
  dia <- 1
  peixes <- peixes_iniciais
  
  simulacao = data.frame(
    dias = c(dia),
    peixes = c(peixes)
  )
  
  while(peixes < capacidade | dia > 1000){
    peixes = ceiling(peixes*(1+.16+tx_reproducao) - peixes*tx_pescados)
    dia = dia + 1
    simulacao[nrow(simulacao)+1,] <- c(dia, peixes)
  }
  return(simulacao)
}

lago2 <- simular_lago_capacidade(90, "Inverno", 7.8)
lago2 %>% tail(1)
```
 
 - Durante a estação Outono e com pH médio da água de 6.6–7.0, após 98 dias, quantos peixes haverá no lago?
 
```{r}
lago3 <- simular_lago(98, 90, "Outono", 6.8)
lago3 %>% tail(1)
```
 
 - Durante a estação Outono e com pH médio da água de 6.6–7.0, quantos dias são necessários para o lago atingir sua capacidade máxima?
 
```{r}
lago4 <- simular_lago_capacidade(90, "Outono", 6.8)
lago4 %>% tail(1)
```
 
